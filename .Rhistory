x = "year") +
geom_smooth(method = "loess")
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess")+
theme_fivethirtyeight()
# Libraries
library(tidyverse)
library(rvest)
library(eurostat)
library(ggthemes)
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess")+
theme_fivethirtyeight()
## Seasonal plot
ggseasonplot(gdp_ts) +
labs(title = "Monthly sales per year",
y = "Sales (€)")
## Seasonal plot
ggseasonplot(gdp_ts) +
labs(title = "Seasonal GDP plot for EU19",
y = "GDP (€)")
## Lag plot of time series
gglagplot(gdp_ts)
## Seasonal plot
ggseasonplot(gdp_ts) +
labs(title = "Seasonal GDP plot for EU19",
y = "GDP (€)")+
theme_fivethirtyeight()
## Lag plot of time series
gglagplot(gdp_ts)+
theme_fivethirtyeight()
ggAcf(gdp_ts)+
theme_fivethirtyeight()
# Difference plot
autoplot(diff(gdp_ts))
# Difference plot
autoplot(diff(gdp_ts))
# ACF of difference plot
ggAcf(diff(gdp_ts))
# Difference plot
autoplot(diff(gdp_ts))+
theme_fivethirtyeight()
# ACF of difference plot
ggAcf(diff(gdp_ts))+
theme_fivethirtyeight()
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation
fit <- auto.arima(train1, lambda = 0)
# Create the trainin set
train1 <- window(gdp_ts, end = c(2016, 4))
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation
fit <- auto.arima(train1, lambda = 0)
# Summarize the fitted model
summary(fit)
# Plot residuals
checkresiduals(fit)
# Plot residuals
checkresiduals(fit)+
theme_fivethirtyeight()
# Test accuracy
accuracy(forecast(fit, h = 4), gdp_ts)
# Plot forecasts
fit %>%
forecast(h = 4) %>%
autoplot() +
labs(title = "Forecasting of GDP",
y = "GDP (€)")+
theme_fivethirtyeight()
# Autocorellation plot
ggAcf(gdp_ts)+
ggtitle("Autocorellation function plot")
theme_fivethirtyeight()
# Difference plot
autoplot(diff(gdp_ts))+
ggtitle("Difference plot") +
theme_fivethirtyeight()
# ACF of difference plot
ggAcf(diff(gdp_ts))+
ggtitle("Autocorellation function plot of differenced time series") +
theme_fivethirtyeight()
# Ljung-Box test
Box.test(diff(gdp_ts), lag = 4, type = "Ljung")
Box.test(diff(gdp_ts), lag = 1, type = "Ljung")
# Ljung-Box test
Box.test(diff(gdp_ts), lag = 4, type = "Ljung")
# Autocorellation plot
ggAcf(gdp_ts)+
ggtitle("Autocorellation function plot")
theme_fivethirtyeight()
# Autocorellation plot
ggAcf(gdp_ts)+
ggtitle("Autocorellation function plot") +
theme_fivethirtyeight()
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess")+
theme_fivethirtyeight()
seq(1995, 2018, 1)
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme_fivethirtyeight()
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme(axis.text.x = element_text(angle = 45)) +
theme_fivethirtyeight()
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme(axis.text.x = element_text(angle = 45)) +
theme_fivethirtyeight()
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme(axis.text.x = element_text(angle = 45)) +
theme_fivethirtyeight()
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme(axis.text.x = element_text(angle = 90)) +
theme_fivethirtyeight()
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme(axis.text.x = element_text(angle = 90, size = 8)) +
theme_fivethirtyeight()
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme(axis.text.x = element_text(angle = 90, size = 5)) +
theme_fivethirtyeight()
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme(axis.text.x = element_text(angle = 90, size = 5))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 90, size = 5))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = 1))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = 2))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = 0))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = 1))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2017, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = .5))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2018, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = .5))
## Lag plot of time series
gglagplot(gdp_ts)+
ggtitle("Lag plot of quarterly GDP for EU 19")
theme_fivethirtyeight()
## Lag plot of time series
gglagplot(gdp_ts)+
ggtitle("Lag plot of quarterly GDP for EU 19") +
theme_fivethirtyeight()
# Ljung-Box test
Box.test(gdp_ts, lag = 4, type = "Ljung")
# Difference plot
autoplot(diff(gdp_ts, lag = 4))+
ggtitle("Difference plot") +
theme_fivethirtyeight()
# ACF of difference plot
ggAcf(diff(gdp_ts))+
ggtitle("Autocorellation function plot of differenced time series") +
theme_fivethirtyeight()
# Difference plot
autoplot(diff(gdp_ts, lag = 4))+
ggtitle("Difference plot") +
theme_fivethirtyeight()
# ACF of difference plot
ggAcf(diff(gdp_ts, lag = 4))+
ggtitle("Autocorellation function plot of differenced time series") +
theme_fivethirtyeight()
# Difference plot
autoplot(diff(gdp_ts, lag = 4))+
ggtitle("Difference plot") +
theme_fivethirtyeight()
# ACF of difference plot
ggAcf(diff(gdp_ts))+
ggtitle("Autocorellation function plot of differenced time series") +
theme_fivethirtyeight()
# Ljung-Box test
Box.test(gdp_ts, lag = 4, type = "Ljung")
# Ljung-Box test
Box.test(gdp_ts, lag = 1, type = "Ljung")
# Ljung-Box test
Box.test(gdp_ts, lag = 1, type = "Ljung")
# Ljung-Box test
Box.test(gdp_ts, lag = 2, type = "Ljung")
# Ljung-Box test
Box.test(gdp_ts, lag = 4, type = "Ljung")
# Plot the original series
autoplot(goog)
# Create the trainin set
train1 <- window(gdp_ts, end = c(2016, 4))
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation
fit <- auto.arima(train1, lambda = 0)
# Summarize the fitted model
summary(fit)
# Create the trainin set
train1 <- window(gdp_ts, end = c(2016, 4))
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation
fit <- auto.arima(train1, lambda = 0)
# Plot residuals
checkresiduals(fit)
# Test accuracy
accuracy(forecast(fit, h = 4), gdp_ts)
# Plot forecasts
fit %>%
forecast(h = 4) %>%
autoplot() +
labs(title = "Forecasting of GDP",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2018, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = .5))
# Plot forecasts
fit %>%
forecast(h = 8) %>%
autoplot() +
labs(title = "Forecasting of GDP",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2018, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = .5))
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation for all data
fit <- auto.arima(gdp_ts, lambda = 0)
# Plot forecasts
fit %>%
forecast(h = 4) %>%
autoplot() +
labs(title = "Forecasting of GDP",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2018, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = .5))
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation for all data
fit <- auto.arima(gdp_ts, lambda = 0)
# Plot forecasts
fit %>%
forecast(h = 4) %>%
autoplot() +
labs(title = "Forecasting of GDP",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2019, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = .5))
gdp_ts
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation for all data
fit <- auto.arima(gdp_ts, lambda = 0)
# Plot forecasts
fit %>%
forecast(h = 4) %>%
autoplot() +
labs(title = "Forecasting of GDP",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2019, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = .5))
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation for all data
fit <- auto.arima(gdp_ts, lambda = 0)
# Plot forecasts
fit %>%
forecast(h = 8) %>%
autoplot() +
labs(title = "Forecasting of GDP",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2020, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = .5))
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation for all data
fit <- auto.arima(gdp_ts, lambda = 0)
# Plot forecasts
fit %>%
forecast(h = 8) %>%
autoplot() +
labs(title = "Forecasting of EU19 GDP",
subtitle = "For 2018 & 2019",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2020, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = .5))
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation for all data
fit <- auto.arima(gdp_ts, lambda = 0)
# Plot forecasts
fit %>%
forecast(h = 8) %>%
autoplot() +
labs(title = "Forecasting of EU19 GDP",
subtitle = "for 2018-19",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2020, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = .5))
# Plot forecasts
fit %>%
forecast(h = 8) %>%
autoplot() +
labs(title = "Forecasting of EU19 GDP",
subtitle = "for 2018-19",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2020, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = -1))
# Plot forecasts
fit %>%
forecast(h = 8) %>%
autoplot() +
labs(title = "Forecasting of EU19 GDP",
subtitle = "for 2018-19",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2020, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, vjust = .5, hjust = 1))
# Plot forecasts
fit %>%
forecast(h = 8) %>%
autoplot() +
labs(title = "Forecasting of EU19 GDP",
subtitle = "for 2018-19",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2020, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2018, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for EU 19 with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2018, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for Eurozone with lowess trend",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2018, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for Eurozone countries",
subtitle = "with lowess curve fitted",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2018, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## Seasonal plot
ggseasonplot(gdp_ts) +
labs(title = "Seasonal GDP plot for Eurozone countries",
y = "GDP (€)")+
theme_fivethirtyeight()
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation for all data
fit <- auto.arima(gdp_ts, lambda = 0)
# Plot forecasts
fit %>%
forecast(h = 8) %>%
autoplot() +
labs(title = "Forecasting of Eurozone countries quarterly GDP",
subtitle = "for 2018-19",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2020, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Test accuracy
accuracy(forecast(fit, h = 5), gdp_ts)
# Test accuracy
accuracy(forecast(fit, h = 4), gdp_ts)
# Test accuracy
accuracy(forecast(fit, h = 4), gdp_ts)
# Create the training set
train1 <- window(gdp_ts, end = c(2016, 4))
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation
fit <- auto.arima(train1, lambda = 0)
# Test accuracy
accuracy(forecast(fit, h = 5), gdp_ts)
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation for all data
fit <- auto.arima(gdp_ts, lambda = 0)
# Plot forecasts
fit %>%
forecast(h = 8) %>%
autoplot() +
labs(title = "Forecasting of Eurozone countries quarterly GDP",
subtitle = "for years 2018-19",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2020, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
shiny::runApp('~/OneDrive/Projects/Tej/Live/App')
